@{ 
    string changelang = null;
    if (this.Request.Cookies["ASP.NET_SessionId"] != null)
    {
        var lang_url = SFSdotNet.Framework.Cache.Caching.GetFromGlobal(this.Request.Cookies["ASP.NET_SessionId"].Value + "lang-url");
        if (lang_url != null)
        {
            changelang = lang_url.ToString();
            SFSdotNet.Framework.Cache.Caching.RemoveInGlobal(this.Request.Cookies["ASP.NET_SessionId"].Value + "lang-url");
        }
    }

    if (!string.IsNullOrEmpty(Request.QueryString["lang"]))
    {
        if (Request.QueryString["lang"] != System.Threading.Thread.CurrentThread.CurrentCulture.ToString())
        {
            changelang = Request.QueryString["lang"];
        }
    }
    else if (Session["lang-url"] != null )
    {
        changelang = Session["lang-url"].ToString();
        Session["lang-url"] = null;

    }
            }
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="google-translate-customization" content="9da77907336bb19b-1638141f26b3b78e-g98d68b5fcd02a875-d"></meta>


    <title>@RenderSection("Title", false)</title>
    <!--AX872-->
    @{
        string area = SFSdotNet.Framework.Web.Mvc.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "area");
        UIModel uiModel = (UIModel)ViewData["uiModel"];
        bool isDetailsOrEdit = false;
        bool hideBrand = false;
        SFSdotNet.Framework.Security.BusinessObjects.secCompanyModule companyModule = SFSdotNet.Framework.Web.Utils.GetDomainCompany(this.Request.RequestContext.HttpContext);
        SFSdotNet.Framework.Security.BusinessObjects.secCompany companyDomain = null;
        if (companyModule != null && companyModule.secCompany != null)
        {
            companyDomain = companyModule.secCompany;
        }
        if (companyDomain != null) {
            if (SFSdotNet.Framework.My.Context.CurrentContext != null && SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.Company.HidePlatformBrand != null)
            {
                hideBrand = SFSdotNet.Framework.My.Context.CurrentContext.Company.HidePlatformBrand.Value;
            }
            else if (companyDomain != null && companyDomain.HidePlatformBrand != null)
            {
                hideBrand = companyDomain.HidePlatformBrand.Value;
            }
        }else
        {
            //var moduleKey = SFSdotNet.Framework.Web.Mvc.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "area");
            var module = SFSdotNet.Framework.Cache.Caching.SystemObjects.GetModuleByKey(area);
            if (SFSdotNet.Framework.My.Context.CurrentContext != null && SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.Company.HidePlatformBrand != null)
            {
                hideBrand = SFSdotNet.Framework.My.Context.CurrentContext.Company.HidePlatformBrand.Value;
            }
            else if (module != null && module.HidePlatformBrand != null)
            {
                hideBrand = module.HidePlatformBrand.Value;
            }
        }
        if (uiModel != null && (uiModel.ContextType == UIModelContextTypes.DisplayForm || uiModel.ContextType == UIModelContextTypes.EditForm))
        {
            isDetailsOrEdit = true;
        }

    }
    @if (SFSdotNet.Framework.Web.Mvc.Utils.IsApplicationModule(this.ViewContext) && area != null)
    {
        <link rel="icon"
      type="image/png" 
      href="@Html.Action("LogoUrl", "Home", new { area = SFSdotNet.Framework.Web.Mvc.Utils.GetRouteDataOrQueryParam( this.Request.RequestContext, "area") })" >

    }
    else
    {
        @*<link rel="shortcut icon"
              href="@(VirtualPathUtility.ToAbsolute("~/"))logo.ico?iuedd=dsf">*@
    }


    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    @{    
        if (!SFSdotNet.Framework.My.Context.OverrideApplication.UseOwnStylesAndScripts)
        {
        @Html.Raw(SFSdotNet.Framework.My.Context.SystemApplication.GetAllScriptsAndCss())
        }
        else
        {
        @Html.Raw(SFSdotNet.Framework.My.Context.OverrideApplication.ScriptsAndCssOverrided)
    
        }
    }
    <link href="@(VirtualPathUtility.ToAbsolute("~/Static/v2/magnificPopup/magnific-popup.css"))" rel="stylesheet" type="text/css" />

    
    <script>
    @if (!string.IsNullOrEmpty(changelang))
{
    <text>
        @*$.removeCookie('lang_sfs');
        $.cookie('lang_sfs', '@(changelang)',
            {
                expires: 30, path: "/", //Whole website

            });*@
        $(document).ready(function () {
           
            //e.preventDefault();
            $.removeCookie('lang_sfs');
            $.cookie('lang_sfs', '@(changelang)',
                {
                    expires: 30, path: "/", //Whole website

                });
            window.location.reload();
            //return false;

       

        });
    </text>
}
//lang_sfs();
  @if (SFSdotNet.Framework.My.Context.CurrentContext != null && SFSdotNet.Framework.My.Context.CurrentContext.Language == "es")
  {
   <text>
    jQuery.timeago.settings.strings = {
        prefixAgo: "hace",
        prefixFromNow: "dentro de",
        suffixAgo: "",
        suffixFromNow: "",
        seconds: "segundos",
        minute: "un minuto",
        minutes: " %d min",
        hour: "una hora",
        hours: "%d horas",
        day: "un día",
        days: "%d días",
        month: "un mes",
        months: "%d meses",
        year: "un año",
        years: "%d años"

    };
        </text>
  }else if (SFSdotNet.Framework.My.Context.CurrentContext != null && SFSdotNet.Framework.My.Context.CurrentContext.Language == "ru")
  {
      <text>
        // Russian
(function() {
  function numpf(n, f, s, t) {
    // f - 1, 21, 31, ...
    // s - 2-4, 22-24, 32-34 ...
    // t - 5-20, 25-30, ...
    var n10 = n % 10;
    if ( (n10 == 1) && ( (n == 1) || (n > 20) ) ) {
      return f;
    } else if ( (n10 > 1) && (n10 < 5) && ( (n > 20) || (n < 10) ) ) {
      return s;
    } else {
      return t;
    }
  }

  jQuery.timeago.settings.strings = {
    prefixAgo: null,
    prefixFromNow: "через",
    suffixAgo: "назад",
    suffixFromNow: null,
    seconds: "меньше минуты",
    minute: "минуту",
    minutes: function(value) { return numpf(value, "%d минута", "%d минуты", "%d минут"); },
    hour: "час",
    hours: function(value) { return numpf(value, "%d час", "%d часа", "%d часов"); },
    day: "день",
    days: function(value) { return numpf(value, "%d день", "%d дня", "%d дней"); },
    month: "месяц",
    months: function(value) { return numpf(value, "%d месяц", "%d месяца", "%d месяцев"); },
    year: "год",
    years: function(value) { return numpf(value, "%d год", "%d года", "%d лет"); }
  };
})();

        </text>
  }

    @if (!Request.Url.ToString().Contains("Public/Login"))
        {
    <text>



    </text>
        }
    var rootSfsAppUrl = '@VirtualPathUtility.ToAbsolute("~/")';
    var overrideApp = '@(SFSdotNet.Framework.Web.Utils.GetOverrideApp(this.Context))';
    var valRequiredMessage = '@(SFSdotNet.Framework.Web.Mvc.Resources.GlobalMessages.THE_FIELD_IS_REQUIRED)';


    </script>

    @RenderSection("CustomScript", false)
    @if (ViewData["HeaderScript"] != null)
    {
        @Html.Raw(ViewData["HeaderScript"].ToString());
    }
    @{
        #region colors
        bool customColors = false;
        string customColorPrimary = null;


        if (!string.IsNullOrEmpty(area) && ((Request.IsAuthenticated == true ) && SFSdotNet.Framework.My.Context.CurrentContext != null && SFSdotNet.Framework.My.Context.CurrentContext.Company != null) || companyDomain != null)
        {
            SFSdotNet.Framework.Security.BusinessObjects.secCompany company = null;

            if (companyDomain != null)
            {
                company = companyDomain;
            }
            if (company == null && SFSdotNet.Framework.My.Context.CurrentContext != null && SFSdotNet.Framework.My.Context.CurrentContext.Company != null)
            {
                company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }
            var customColorObj = SFSdotNet.Framework.Cache.Caching.GetFromCompany("custom-color-primary", company.GuidCompany);
            if (customColorObj != null && (bool)customColorObj == true ){
                var colorPrimary  = SFSdotNet.Framework.Cache.Caching.GetFromCompany("color-primary", company.GuidCompany);
                if (colorPrimary != null ){
                    customColorPrimary = colorPrimary.ToString();
                }

            }else{
                // Guid guidCompany = SFSdotNet.Framework.My.Context.CurrentContext.Company.GuidCompany;
                if (company == null)
                {
                    company = SFSdotNet.Framework.My.Context.CurrentContext.Company; // SFSdotNet.Framework.Security.BR.secCompaniesBR.Instance.GetBy("GuidCompany == Guid(\"" + guidCompany.ToString() + "\")").FirstOrDefault();
                }
                Guid? guidCompany = null;
                if (company != null)
                {
                    guidCompany = company.GuidCompany;

                }
                else
                {

                }

                if (company != null && !string.IsNullOrEmpty(company.ColorPrimary)){
                    SFSdotNet.Framework.Cache.Caching.SetToCompany(true, "custom-color-primary", guidCompany.Value);
                    customColorPrimary = company.ColorPrimary;
                    SFSdotNet.Framework.Cache.Caching.SetToCompany(company.ColorPrimary, "color-primary", guidCompany.Value);
                }else{
                    SFSdotNet.Framework.Cache.Caching.SetToCompany(false, "custom-color-primary", guidCompany.Value);
                }
            }

        }

        #endregion
    }
    @if (!string.IsNullOrEmpty(customColorPrimary))
    { 
    <style>
        .navbar-inverse .navbar-inner, .navbar-inverse .btn-navbar, .top.navbar{
             background-color: @(customColorPrimary);
        }
        .dropdown-menu > li > a:hover, .dropdown-menu > li > a:focus, .dropdown-submenu:hover > a, .dropdown-submenu:focus > a{
                     background-color: @(customColorPrimary);

        }
        h1{
            color:@(customColorPrimary);
        }
        .navbar-inverse .nav li.dropdown.open > .dropdown-toggle, .navbar-inverse .nav li.dropdown.active > .dropdown-toggle, .navbar-inverse .nav li.dropdown.open.active > .dropdown-toggle{
            background-color: @(customColorPrimary);
            // agregar luminosidad
        }
        a, a:hover, a:link, a:visited, a.btn-link, a.btn-link:hover, a.btn-link:link, a.btn-link:visited    {
            color:@(customColorPrimary);

        }
        .nav .dropdown-toggle:hover .caret, .nav .dropdown-toggle:focus .caret {
            border-top-color: @(customColorPrimary);
            border-bottom-color: @(customColorPrimary);
        }
      .nav .dropdown-toggle .caret {
        margin-top: 6px;
        border-top-color:  @(customColorPrimary);
        border-bottom-color:  @(customColorPrimary);
        }
        .display .display-field, .edit .display-field{
            color:@(customColorPrimary);

        }
        a.btn-primary:hover, a.btn-primary:visited, a.btn-primary:focus, a.btn-primary:active, a.btn-primary:visited, a.btn-primary:link, .btn-primary:hover, .btn-primary:visited, .btn-primary:focus, .btn-primary:active, .btn-primary:visited, .btn-primary.disabled, [disabled].btn-primary, .btn-primary{
            background-color:@(customColorPrimary);
            color:white;
        }
       a.foot:link, a.foot:visited, a.foot:hover, a.foot:active  {
            margin-top: 30px;
            min-height: 100px;
            margin-bottom: 25px;
            color: #666666;
        }

    </style>
        
 }
    <script type = 'text/javascript' >
        //var appInsights=window.appInsights||function(config)
        //{
        //    function r(config){ t[config] = function(){ var i = arguments; t.queue.push(function(){ t[config].apply(t, i)})} }
        //    var t = { config:config},u=document,e=window,o='script',s=u.createElement(o),i,f;for(s.src=config.url||'//az416426.vo.msecnd.net/scripts/a/ai.0.js',u.getElementsByTagName(o)[0].parentNode.appendChild(s),t.cookie=u.cookie,t.queue=[],i=['Event','Exception','Metric','PageView','Trace','Ajax'];i.length;)r('track'+i.pop());return r('setAuthenticatedUserContext'),r('clearAuthenticatedUserContext'),config.disableExceptionTracking||(i='onerror',r('_'+i),f=e[i],e[i]=function(config, r, u, e, o) { var s = f && f(config, r, u, e, o); return s !== !0 && t['_' + i](config, r, u, e, o),s}),t
        //}({
        //    instrumentationKey:'1f63d875-962e-4f3a-aee0-a5a2ca6515d1'
        //});
        
        //window.appInsights=appInsights;
        //appInsights.trackPageView();
    </script>
</head>
<body>

    @*    <div id="headtop" class="colordarkbg">
    <div class="container">
        <div class="row-fluid">
        <div class="span6">
            <img  src="@SFSdotNet.Framework.My.Context.SystemApplication.SystemDefaultThemePath/img/top-webapps.png" />
        </div>
        <div class="span6">
            @Html.Partial("MenuSystem")
        </div>
   
        </div>
</div>
     </div>*@

        <div class="navbar  navbar-inverse top">
        <div class="navbar-inner">
            <div class="container">
                <a class="btn btn-navbar " data-toggle="collapse" data-target=".nav-collapse"><span class="icon-th-list"></span></a>
                @if (hideBrand == false)
                {
                    <a href="@(VirtualPathUtility.ToAbsolute("~/"))" class="brand">

                        <img src="@SFSdotNet.Framework.My.Context.SystemApplication.SystemDefaultThemePath/img/top-webapps.png" />
                    </a>
                }
                <ul class="nav">
@if (hideBrand == false)
{
                    @Html.Partial("MenuLogoTop")
}

                </ul>


                <div class="nav-collapse collapse">
                    <ul class="nav pull-right">
                        @Html.Partial("TopMessages")
                        @Html.Partial("MenuLanguage")
                        @Html.Partial("MenuSystem")
                    </ul>
                </div>
            </div>

        </div>
    </div>
    

    <div id="headnav" class="colorlitemedbg">
        <div class="container">
            <div class="row-fluid">
                <div class="span6">
                    @Html.Partial("LogoCompany")
                </div>
                <div class="span6">
                    @Html.Partial("LoginStatus")
                </div>
            </div>
        </div>
    </div>

    <div id="menunav" class="colorlitemedbg">
        <div class="container">
            <div class="row-fluid">
                <div class="span10">

                    @Html.Partial("MenuTopModule")

                </div>
                <div class="span2"></div>
            </div>
        </div>


    </div>
    <div id="breadcumb" class="smalltext @(isDetailsOrEdit?"details-edit":"")">
        <div class="container">
            <div class="row-fluid">
                <div class="span9">
                    @if (ViewData["breadcrumb"] != null)
                    {
                        @Html.Raw(ViewData["breadcrumb"].ToString())
                    }
                    else
                    {
                      
                       
                    }

                </div>
                <div class="span3 text-right">
                    @if (ViewData["ShowSearch"] != null)
                    {
                        <input name="search-tp" id="search-tp" placeholder="@(GlobalMessages.SEARCH)" class="input-medium" value="" />
    <script>
    $('#search-tp')
       .listenForEnter()
       .bind('pressedEnter', function (e) {
           e.preventDefault();
           searchText = $("#search-tp").val();
           window.location.href = "@(Request.Url.AbsolutePath)?q=" + searchText;
       });
    </script>

                    }
                    

                  
                    
                </div>
                </div>

        </div>


    </div>
    <div id="bodyconten" class="colorbg @(isDetailsOrEdit?"details-edit":"")">
        <div class="container">
            <div class="container-fluid">
                <div class="row-fluid">
                    <div class="span12">
                        @RenderBody()
                    </div><!--span12-->
                </div><!--row-fluid-->
            </div><!--container-fluid-->
        </div><!--container-->
    </div><!--bodycontent-->
    <div id="footer" class="colorlitemedbg">
        <div class="container">
            @if (hideBrand == false)
            {
                @Html.Partial("FooterAllSiteView")

            }
        </div>
    </div>  
    @if (SFSdotNet.Framework.My.Context.CurrentContext != null)
    {
    <div class="text-center">
        Culture: @System.Threading.Thread.CurrentThread.CurrentCulture UICulture: @System.Threading.Thread.CurrentThread.CurrentCulture cookieserver: @SFSdotNet.Framework.My.Context.CurrentContext.ReadCookie("lang_sfs") company: @(SFSdotNet.Framework.My.Context.CurrentContext != null ? SFSdotNet.Framework.My.Context.CurrentContext.Company != null ? SFSdotNet.Framework.My.Context.CurrentContext.Company.Name : "" : "")  user: @(SFSdotNet.Framework.My.Context.CurrentContext.User != null ? SFSdotNet.Framework.My.Context.CurrentContext.User.UserName : "")
    </div>
    }

    @if (System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName.ToLower() != "es" && area == null )
    {
        <div id="google_translate_element" style="float:right; position:fixed; bottom:10px; right:10px;"></div>
        <script type="text/javascript">
            function googleTranslateElementInit() {
                new google.translate.TranslateElement({
                    pageLanguage: 'es'
                }, 'google_translate_element');
            }
        </script>
        <script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
        <script>
            function fireEvent(element, event) {
                console.log("in Fire Event");
                if (document.createEventObject) {
                    // dispatch for IE
                    console.log("in IE FireEvent");
                    var evt = document.createEventObject();
                    return element.fireEvent('on' + event, evt)
                }
                else {
                    // dispatch for firefox + others
                    console.log("In HTML5 dispatchEvent");
                    var evt = document.createEvent("HTMLEvents");
                    evt.initEvent(event, true, true); // event type,bubbling,cancelable
                    return !element.dispatchEvent(evt);
                }
            }


            var google_translate_element_changed = false;
            $(document).ready(function () {
                $('#google_translate_element').bind('DOMSubtreeModified', function () {
                    if (google_translate_element_changed == false) {
                        google_translate_element_changed = true;
                        setTimeout(function () {
                            var jObj = $('select.goog-te-combo');
                            var db = jObj.get(0);
                            jObj.val("en");
                            fireEvent(db, 'change');

                        }, 1000);
                    }
                });

            });
        </script>
    } 

</body>
</html>
