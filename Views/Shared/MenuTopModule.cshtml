@using System.Linq.Expressions;
@using System.Collections
@using System.Collections.Generic
@using System.Linq



@{
    string classULRoot = "nav nav-tabs";
    string classLIWithChilds = "dropdown";
    string classULSecondLevel = "dropdown-menu";
    string classAMenu = "dropdown-toggle";
    if (ViewData["uiv"] != null && ViewData["uiv"].ToString() == "2")
    {
        classULRoot = "nav";
        classULSecondLevel = "nav nav-second-level";
        classLIWithChilds = "";
        classAMenu = "";
    }
    bool hideUlRoot = false;
}

@if (ViewData["HideULRoot"] != null && ((bool)ViewData["HideULRoot"]) == true ) {
    hideUlRoot = true;
}
@if(hideUlRoot== false )
{
     @Html.Raw("<ul class=\""+ classULRoot +"\" id=\"side-menu\">");
}


    @{
        string area = SFSdotNet.Framework.Web.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "area");
        string controller = SFSdotNet.Framework.Web.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "controller");
        string action = SFSdotNet.Framework.Web.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "action");

        string overrideModule = (new SFSdotNet.Framework.Web.Mvc.ControllerBase()).GetOverrideApp(this.Request.RequestContext.HttpContext);
        //SiteMap.SiteMapResolve += new System.Web.SiteMapResolveEventHandler(SFSdotNet.Framework.Web.Mvc.SiteMap.SiteMap_SiteMapResolve); 

        //var ocu = MvcSiteMapProvider.SiteMaps.Current.FindSiteMapNode(Request.RawUrl);


    }

@if (hideUlRoot == false)
{
    @Html.Raw("</ul>");
}
