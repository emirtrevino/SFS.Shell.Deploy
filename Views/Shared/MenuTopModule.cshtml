@using System.Linq.Expressions;
@using System.Collections
@using System.Collections.Generic
@using System.Linq



@{
    string classULRoot = "nav nav-tabs";
    string classLIWithChilds = "dropdown";
    string classULSecondLevel = "dropdown-menu";
    string classAMenu = "dropdown-toggle";
    if (ViewData["uiv"] != null && ViewData["uiv"].ToString() == "2")
    {
        classULRoot = "nav";
        classULSecondLevel = "nav nav-second-level";
        classLIWithChilds = "";
        classAMenu = "";
    }
    bool hideUlRoot = false;
}

@if (ViewData["HideULRoot"] != null && ((bool)ViewData["HideULRoot"]) == true ) {
    hideUlRoot = true;
}
@if(hideUlRoot== false )
{
     @Html.Raw("<ul class=\""+ classULRoot +"\" id=\"side-menu\">");
}


    @{
        string area = SFSdotNet.Framework.Web.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "area");
        string controller = SFSdotNet.Framework.Web.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "controller");
        string action = SFSdotNet.Framework.Web.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "action");

        string overrideModule = (new SFSdotNet.Framework.Web.Mvc.ControllerBase()).GetOverrideApp(this.Request.RequestContext.HttpContext);
        //SiteMap.SiteMapResolve += new System.Web.SiteMapResolveEventHandler(SFSdotNet.Framework.Web.Mvc.SiteMap.SiteMap_SiteMapResolve); 

        //var ocu = MvcSiteMapProvider.SiteMaps.Current.FindSiteMapNode(Request.RawUrl);

        var nodeCurrent = MvcSiteMapProvider.SiteMaps.Current.CurrentNode; //System.Web.SiteMap.CurrentNode;
        string active = "";

        bool isHomePublic = false;
        if (area == "SFSdotNetFrameworkSecurity" && Request.QueryString["usemode"] == "myaccount" && string.IsNullOrEmpty(overrideModule))
        {
            isHomePublic = true;
        }
        string title = null;
        if ((area != null  || !string.IsNullOrEmpty(overrideModule)) && isHomePublic == false)
        {


            if (area != null)
            {


            }else{
                if (!string.IsNullOrEmpty(overrideModule))
                {
                    area = overrideModule;
                }
            }
            if (!string.IsNullOrEmpty(area))
            {
                string overrideArea = null;
                if (!string.IsNullOrEmpty(overrideModule))
                {
                    overrideArea = overrideModule;
                    area = overrideArea;
                }
                if (SFSdotNet.Framework.My.Context.CurrentContext != null && (new SFSdotNet.Framework.Security.Permissions()).IsAllowed(SFSdotNet.Framework.My.Context.CurrentContext.User, area, null, "r"))
                {

                    if (this.ViewContext.RouteData.Values["controller"].ToString() == "Home" || (this.ViewContext.RouteData.Values["controller"].ToString() == "Dashboard" || this.ViewContext.RouteData.Values["controller"].ToString() == "DashboardTest"))
                    {
                        active = "active";
                    }
        <text>
        <li class="@active"><a tabindex="-1" href="@VirtualPathUtility.ToAbsolute("~/")@area" class="@active">@GlobalMessages.HOME</a></li>
        </text>
                    var nodeModule = MvcSiteMapProvider.SiteMaps.Current.FindSiteMapNodeFromKey(area);
                    if (nodeModule != null)
                    {

                        SFSdotNet.Framework.Navigation.MenuItem menuItemModule = new SFSdotNet.Framework.Navigation.MenuItem();
                        menuItemModule.Key = nodeModule.Key;
                        foreach (var nodeAttr in nodeModule.Attributes)
                        {
                            menuItemModule.Attributes.Add(new KeyValuePair<string, string>(nodeAttr.Key, nodeAttr.Value.ToString()));

                        }

                        List<SFSdotNet.Framework.Navigation.MenuItem> menus = new List<SFSdotNet.Framework.Navigation.MenuItem>();
                        foreach (var node in nodeModule.ChildNodes)
                        {
                            if (SFSdotNet.Framework.Navigation.MenuItem.ExistChildsMenuAllowed(System.Web.HttpContext.Current, node))
                            {


                                SFSdotNet.Framework.Navigation.MenuItem menuItem = new SFSdotNet.Framework.Navigation.MenuItem(menuItemModule);
                                foreach (var nodeAttr in node.Attributes)
                                {
                                    menuItem.Attributes.Add(new KeyValuePair<string, string>(nodeAttr.Key, nodeAttr.Value.ToString()));

                                }
                                System.Collections.Generic.KeyValuePair<string, string> bo = menuItem.Attributes.FirstOrDefault(p => p.Key == "businessObjectKey");

                                if ((string.IsNullOrEmpty(bo.Key) || node.RouteValues.ContainsKey("usemode")) && (node.Attributes.ContainsKey("moduleKey") || !string.IsNullOrEmpty(node.Area)))
                                {
                                    if (node.Attributes["moduleKey"] == null)
                                    {
                                        node.Attributes.Add("moduleKey", node.Area);
                                    }
                                    SFSdotNet.Framework.Globalization.TextUI textUI = new SFSdotNet.Framework.Globalization.TextUI(node.Attributes["moduleKey"].ToString(), null);
                                    menuItem.Title = textUI.GetTextFrom(node, "Title");

                                }
                                else
                                {
                                    var uiText = this.ViewContext.HttpContext.GetGlobalResourceObject(menuItem.Attributes.FirstOrDefault(p => p.Key == "moduleKey").Value + "." + menuItem.Attributes.FirstOrDefault(p => p.Key == "businessObjectKey").Value, "__entity__") as SFSdotNet.Framework.Globalization.UITexts;
                                    menuItem.Title = uiText.PluralName;
                                }
                                menuItem.Key = node.Key;
                                menus.Add(menuItem);
                            }
                        }

                        foreach (var node in nodeModule.ChildNodes)
                        {
                            if (SFSdotNet.Framework.Navigation.MenuItem.ExistChildsMenuAllowed(System.Web.HttpContext.Current, node))
                            {
                                var hasChilds = node.ChildNodes.Count > 0;
                                bool isdesc = false;
                                if (nodeCurrent != null)
                                {
                                    isdesc = nodeCurrent.IsDescendantOf(node);
                                }
                                active = "";
                                if (isdesc)
                                {
                                    active = "active";
                                }

                                bool accesible = (new SFSdotNet.Framework.Web.Mvc.Security.NodeMapVisibilityProvider()).IsVisible(node, System.Web.HttpContext.Current, ((MvcSiteMapProvider.ISiteMapNode)node).RouteValues);

                                if (accesible)
                                {
                                    var menuItemFinded = menus.FirstOrDefault(p => p.Key == node.Key);

                                    if (!hasChilds)
                                    {
        <text>
        <li><a href="@node.Url" class="@active">@(!string.IsNullOrEmpty(menuItemFinded.Title) ? menuItemFinded.Title : menuItemFinded.Key )</a></li>
        </text>
                                }
                                else
                                {
                                    foreach (var subNode in node.ChildNodes)
                                    {
                                        SFSdotNet.Framework.Navigation.MenuItem menuItem = new SFSdotNet.Framework.Navigation.MenuItem();
                                        foreach (var nodeAttr in subNode.Attributes)
                                        {
                                            menuItem.Attributes.Add(new KeyValuePair<string, string>(nodeAttr.Key, nodeAttr.Value.ToString()));

                                        }
                                        //if(subNode.RouteValues.ContainsKey("usemode"))
                                        //{
                                        //    menuItem.Attributes.Add(new KeyValuePair<string, string>("usemode", subNode.RouteValues["usemode"].ToString()));

                                        //}
                                        System.Collections.Generic.KeyValuePair<string, string> bo = menuItem.Attributes.FirstOrDefault(p => p.Key == "businessObjectKey");
                                        if ((string.IsNullOrEmpty(bo.Key) || subNode.RouteValues.ContainsKey("usemode")) && subNode.Attributes.ContainsKey("moduleKey") && subNode.Attributes.ContainsKey("_resourceKey|Title"))
                                        {
                                            SFSdotNet.Framework.Globalization.TextUI textUI = new SFSdotNet.Framework.Globalization.TextUI(subNode.Attributes["moduleKey"].ToString(), null);
                                            menuItem.Title = textUI.GetTextFrom(subNode, "Title");

                                        }
                                        else
                                        {
                                            var attModuleKey = menuItem.Attributes.FirstOrDefault(p => p.Key == "moduleKey");
                                            if (attModuleKey.Key != null && attModuleKey.Value != null)
                                            {
                                                var uiText = this.ViewContext.HttpContext.GetGlobalResourceObject(attModuleKey.Value + "." + bo.Value, "__entity__") as SFSdotNet.Framework.Globalization.UITexts;

                                                menuItem.Title = uiText.PluralName;
                                                if (string.IsNullOrEmpty(menuItem.Title))
                                                {
                                                    menuItem.Title = menuItem.Attributes.FirstOrDefault(p => p.Key == "businessObjectKey").Value;
                                                }
                                            }

                                        }

                                        menuItem.Key = subNode.Key;
                                        menuItemFinded.Children.Add(menuItem);
                                    }

                                    bool viewCatalogOthers = true;
                                    if (menuItemFinded.Children.Count() == 1 && menuItemFinded.Children.ToList()[0].Key.EndsWith("_Catalogs_Others"))
                                    {
                                        var subNode = node.ChildNodes.FirstOrDefault(p => p.Key == menuItemFinded.Children.ToList()[0].Key);
                                        if (subNode.ChildNodes.Count() == 0)
                                        {
                                            viewCatalogOthers = false;
                                        }
                                        else
                                        {
                                            if (!SFSdotNet.Framework.Navigation.MenuItem.ExistChildsMenuAllowed(System.Web.HttpContext.Current, subNode))
                                            {
                                                viewCatalogOthers = false;
                                            }

                                        }
                                    }
                                    if (viewCatalogOthers)
                                    {
        <text>
        <li class="@(classLIWithChilds) @active"  ><a class="@(classAMenu)" data-toggle="dropdown" tabindex="-1" href="#">@(!string.IsNullOrEmpty(menuItemFinded.Title) ? menuItemFinded.Title : menuItemFinded.Key)<b class="caret"></b></a>
            
            <ul class="@(classULSecondLevel)">
                                    
                                    @foreach (var subNodeMenuItem in menuItemFinded.Children.OrderBy(p => p.Title))
                                    {
                                        var subNode = node.ChildNodes.FirstOrDefault(p => p.Key == subNodeMenuItem.Key);

                                        accesible = (new SFSdotNet.Framework.Web.Mvc.Security.NodeMapVisibilityProvider()).IsVisible(subNode, System.Web.HttpContext.Current, ((MvcSiteMapProvider.ISiteMapNode)subNode).RouteValues);

                                        if (accesible)
                                        {


                                            System.Text.StringBuilder sb = new System.Text.StringBuilder();
                                            /*     
                                            foreach (var subNode2 in subNode.ChildNodes.OfType<SiteMapNode>().OrderBy(p=>p.Title))
                                            {
                                                bool visible = true;
                                                if (((MvcSiteMapProvider.MvcSiteMapNode)(subNode2)).MetaAttributes.ContainsKey("visiblemenu"))
                                                {
                                                    if (((MvcSiteMapProvider.MvcSiteMapNode)(subNode2)).MetaAttributes["visiblemenu"] == "true")
                                                    {
                                                        visible = true;
                                                    }else{
                                                        visible = false;
                                                    }

                                                }
                                                if (((MvcSiteMapProvider.MvcSiteMapNode)(subNode2)).Action == "CreateGen" || ((MvcSiteMapProvider.MvcSiteMapNode)(subNode2)).Action == "DetailsGen" || ((MvcSiteMapProvider.MvcSiteMapNode)(subNode2)).Action == "EditGen")
                                                {
                                                    visible = false;
                                                }

                                                if (subNode2.IsAccessibleToUser(System.Web.HttpContext.Current) && visible)
                                                //if (accesible)
                                                {


                                                    sb.Append("<li><a href='" + subNode2.Url + "'>" + subNode2.Title + "</a></li>");

                                                }
                                            }
                                            */
                                            var hasChilds2 = subNode.ChildNodes.OfType<SiteMapNode>().Count() > 0;
                                            if (!hasChilds2 || sb.Length == 0)
                                            {
                                                string extraEnd = "";
                                                if (subNode.Route == "area_override_usemode" && subNode.Action == "Index" && !subNode.Url.EndsWith("/Index"))
                                                {
                                                    extraEnd = "/Index";
                                                }

                                        <text>
                                        <li><a href="@(subNode.Url + extraEnd)">@(!string.IsNullOrEmpty(subNodeMenuItem.Title) ? subNodeMenuItem.Title : subNodeMenuItem.Key  )</a></li>
                                        </text>
                                            }
                                            else
                                            {
                                        <text>
                                        <li class="@(classLIWithChilds)">
                                            <a tabindex="-1" href="@subNode.Url">@subNodeMenuItem.Title</a>

                                            @if (sb.Length > 0)
                                            {
                                                <text>
                                                <ul class="tercer nivel?">
                                                    @Html.Raw(sb.ToString())
                                                </ul>
                                                </text>
                                            }
                                        </li>
                                        </text>

                                            }




                                        }

                                    }

            </ul>

        </li>
        </text>
                                    }
                                }
                            }
                        }
                    }
                }
            }
                <text>
             @*   <li class="@active dropdown">Sistema
                    <ul class="dropdown-menu">
                        <li>Menu 1</li>
                    </ul>
                </li>*@
                </text>
            }
            
        }
        else
        {
            string activeAllApps = Request.Url.ToString().EndsWith("AllApps") ? "active": "";
            string activeMyApps = Request.Url.ToString().EndsWith("MyApps") ? "active" : "";
            string activeMyAccount = Request.Url.ToString().Contains("secUsers/DetailsGen") ? "active" : ""; ;
            
                        <text>
              <li><a href="@VirtualPathUtility.ToAbsolute("~/")" class="">@GlobalMessages.HOME</a></li>
              <li class="@activeAllApps"><a href="@VirtualPathUtility.ToAbsolute("~/")Go/AllApps" >@MembershipAppsMessages.ALL_APPS</a></li>
                <li class="@activeMyApps"><a href="@VirtualPathUtility.ToAbsolute("~/")Go/MyApps" >@MembershipAppsMessages.MY_APPS</a></li>
          <li class="@activeMyAccount" ><a href="@VirtualPathUtility.ToAbsolute("~/")Go/MyAccount" >@GlobalMessages.MY_ACCOUNT</a></li>
     </text>

        }
    }

@if (hideUlRoot == false)
{
    @Html.Raw("</ul>");
}
